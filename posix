//Operating Systems - CS444;
//Spring 2023;
//Christian Soucy;
//Assignment Info: Producer-Consumer Problem, Due 02/26/2023;
//Program Description:
    //Solves the producer-consumer problem without starvation or deadlocks;
    //This is done using the condition variables method with mutexes;
//Last modified: 02/27/2023, 11:52 AM;
//Youtube Code Review & Demo Link: *PASTE HERE*

//Includes/Namespace://
#include <iostream>
#include <stdio.h>
#include <pthread.h>
#include <queue>
using namespace std;

//Defines://
#define MAX 1000

//Global Variables://
queue<int> buffer;
pthread_mutex_t the_mutex;
pthread_cond_t condc, condp;

//Functions://
void *producer(void *ptr) {
  int i;

  for (i = 1; i <= MAX; i++) {
    cout << endl;
    cout << "locking buffer for producer..." << endl;
    cout << endl;

    pthread_mutex_lock(&the_mutex);

    while (buffer.size() != 0) {
      pthread_cond_wait(&condp, &the_mutex);
    }
    buffer.push(i);

    cout << "producer count: " << i;
    cout << endl;
    pthread_cond_signal(&condc);
    pthread_mutex_unlock(&the_mutex);
    cout << "unlocking mutex after consumer signal is sent" << endl;

    if (i == MAX) {
      cout << "Buffer limit reached. Terminating processes regrading producer." << endl;
      cout << endl;
    }
  }

  pthread_exit(0);
}

void *consumer(void *ptr) {
  int i;

  for (i = 1; i <= MAX; i++) {
    cout << endl;
    cout << "locking buffer for consumer..." << endl;
    cout << endl;

    pthread_mutex_lock(&the_mutex);

    while (buffer.empty()) {
      pthread_cond_wait(&condc, &the_mutex);
    }

    i = buffer.front();
    buffer.pop();

    cout << "consumer count: " << i;
    cout << endl;

    pthread_cond_signal(&condp);
    pthread_mutex_unlock(&the_mutex);
    cout << "unlocking mutex after producer signal is sent" << endl;

    if (i == MAX) {
      cout << "Buffer limit reached. Terminating prcesses regrading consumer." << endl;
    }
  }

  pthread_exit(0);
}


//Main Function://
int main() {
  pthread_t p_producer, p_consumer;

  pthread_mutex_init(&the_mutex, 0);
  pthread_cond_init(&condc, 0);
  pthread_cond_init(&condp, 0);
  pthread_create(&p_consumer, 0, consumer, 0);
  pthread_create(&p_producer, 0, producer, 0);
  pthread_join(p_producer, 0);
  pthread_join(p_consumer, 0);
  pthread_cond_destroy(&condc);
  pthread_cond_destroy(&condp);
  pthread_mutex_destroy(&the_mutex);

  cout << endl;

//Return://
  return 0;
}





